name: manual-main-RELEASE

env:
  GPG_KEY_ID_GITHUB_TECHUSER: '${{ secrets.GPG_KEY_ID_GITHUB_TECHUSER }}'
  PROJECT_NAME: ${GITHUB_REPOSITORY#*/}

on:
  workflow_dispatch:
    inputs:
      comment:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Comment for release'
        # Default value if no value is explicitly provided
        default: 'Start MAIN release from WEB UI'
        # Input has to be provided for the workflow to run
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  manual-main-RELEASE:
    name: Manual main release

    # run only on main
    if: (github.ref_name == 'main' && contains('["rombow","czenczl","speter555"]', github.actor))

    runs-on: ubuntu-latest

    steps:

      ###############
      # pre release
      ###############

      # Import GPG key
      - name: Import GPG key
        # GPG private key exported by armor (begins with: '-----BEGIN PGP PRIVATE KEY BLOCK-----') the whole content encoded with base64, and loaded in the content of the secret
        # Decode and load the base64 encoded private key
        run: |
          mkdir -p ~/.gnupg/
          echo "${{ secrets.GPG_SIGNING_KEY_GITHUB_TECHUSER }}" | base64 --decode > ~/.gnupg/private.key
          gpg --import ~/.gnupg/private.key

      # https://github.com/shimataro/ssh-key-action
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          # The content is in PEM format (begins with: '-----BEGIN RSA PRIVATE KEY-----') SSH key
          key: ${{ secrets.SSH_PRIVATE_KEY_GITHUB_TECHUSER }}
          name: id_rsa # optional
          known_hosts: ${{ secrets.KNOWN_HOSTS }} # its content is currently empty
          # config: ${{ secrets.CONFIG }} # ssh_config; optional

      # Configure GIT for signed commit
      - name: Configure GIT for signed commit
        run: |
          git config --global user.name "icellmobilsoft-robot"
          git config --global user.email "github_techuser@icellmobilsoft.hu"
          git config --global user.signingkey "${{ secrets.GPG_KEY_ID_GITHUB_TECHUSER }}"
          git config --global commit.gpgsign true
          git config --global tag.gpgSign true

      # https://github.com/actions/setup-java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      # https://github.com/actions/checkout
      - name: Checkout main
        uses: actions/checkout@v4


      # Maven release prepare Dryrun
      - name: Maven release:prepare dryRun
        id: prepare
        env:
          GPG_KEY_ID_GITHUB_TECHUSER: ${{ secrets.GPG_KEY_ID_GITHUB_TECHUSER }}
        run: |
          
          mvn -B release:prepare -DdryRun=true -Dgpg.keyname=$GPG_KEY_ID_GITHUB_TECHUSER --file pom.xml
          SCM_TAG=`cat release.properties | grep -w "scm.tag" | cut -d'=' -f2`
          mvn release:clean --file pom.xml
          
          RELEASE_VERSION=$SCM_TAG
          echo release version is ${RELEASE_VERSION}
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          
          // if github.ref_name == 'main' then release_type = minor else release_type = major
          RELEASE_TYPE=MINOR
          echo release type is ${RELEASE_TYPE}
          echo "RELEASE_TYPE=${RELEASE_TYPE}" >> $GITHUB_OUTPUT
          
          RELEASE_GIT_COMMIT_SHA=$GITHUB_SHA
          echo release type is${RELEASE_GIT_COMMIT_SHA}
          echo "RELEASE_GIT_COMMIT_SHA=${RELEASE_GIT_COMMIT_SHA}" >> $GITHUB_OUTPUT
          
          RELEASE_BRANCH_NAME=release/${SCM_TAG%.*}.x
          echo new release branch name is  ${RELEASE_BRANCH_NAME}
          echo "RELEASE_BRANCH_NAME=${RELEASE_BRANCH_NAME}" >> $GITHUB_OUTPUT
          
          MR_BRANCH_NAME=feature/$SCM_TAG-release
          echo new mr branch name is  ${MR_BRANCH_NAME}
          echo "MR_BRANCH_NAME=${MR_BRANCH_NAME}" >> $GITHUB_OUTPUT
      
      

      # Create release branch
      - name: Create release branch
        id: createReleaseBranch
        shell: bash
        run: |
          git checkout -b ${{steps.prepare.outputs.RELEASE_BRANCH_NAME}} refs/remotes/origin/main
          git push --set-upstream origin ${{steps.prepare.outputs.RELEASE_BRANCH_NAME}}
          echo "${{steps.prepare.outputs.RELEASE_BRANCH_NAME}} branch created."

      # https://github.com/actions/checkout
      - name: Checkout new release branch
        uses: actions/checkout@v4
        with:
          ref: ${{steps.prepare.outputs.RELEASE_BRANCH_NAME}}

      # Maven release prepare
      - name: Maven release prepare
        env:
          GPG_KEY_ID_GITHUB_TECHUSER: ${{ secrets.GPG_KEY_ID_GITHUB_TECHUSER }}
        run: |
          mvn -B release:prepare -Dgpg.keyname=$GPG_KEY_ID_GITHUB_TECHUSER --file pom.xml
          git push origin ${{steps.prepare.outputs.RELEASE_BRANCH_NAME}}

      # Maven release perform
      - name: Maven release perform
        env:
          GPG_KEY_ID_GITHUB_TECHUSER: ${{ secrets.GPG_KEY_ID_GITHUB_TECHUSER }}
          OSSRH_USERNAME: '${{ secrets.OSS_SONATYPE_ORG_USER }}'
          OSSRH_PASSWORD: '${{ secrets.OSS_SONATYPE_ORG_PASSWORD }}'
        run: mvn -B release:perform -Dgpg.keyname=$GPG_KEY_ID_GITHUB_TECHUSER -s $GITHUB_WORKSPACE/.github/.m2/settings.xml --file pom.xml

      ###############
      ## post release
      ###############

      # https://github.com/actions/checkout
      - name: Checkout main
        uses: actions/checkout@v4

      # Create bump MAJOR version branch
      - name: Create bump MAJOR version branch
        id: bumpbranch
        shell: bash
        run: |
          NEXT_MASTER_VERSION=$(echo ${{steps.prepare.outputs.SCM_TAG}} |  awk -F'.' '{print $1"."$2+1"."0}' |  sed s/[.]$//)
          TARGET_BRANCH_NEXT_VERSION=$(echo ${NEXT_MASTER_VERSION} | rev | cut -d '-' -f1 | rev)-SNAPSHOT
          mvn -B release:update-versions -DdevelopmentVersion=$TARGET_BRANCH_NEXT_VERSION --file pom.xml
          
          COMMIT_MESSAGE="Bump version to $TARGET_BRANCH_NEXT_VERSION"
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> $GITHUB_OUTPUT

          git add .
          git commit -a -m "${COMMIT_MESSAGE}"
          echo next master branch version is $TARGET_BRANCH_NEXT_VERSION

      # https://github.com/peter-evans/create-pull-request
      # This step pushes the previous steps to the given branch and creates an MR to the base
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4.2.3
        with:
          commit-message: ${{steps.bumpbranch.outputs.COMMIT_MESSAGE}}
          branch: ${{steps.prepare.outputs.MR_BRANCH_NAME}}
          title: ${{steps.bumpbranch.outputs.COMMIT_MESSAGE}}
          base: main
          delete-branch: true
