version: "3.8"

# run from project directory
# docker-compose -f ./etc/docker-compose/docker-compose.local.observability.yml up --build --force-recreate
services:
    prometheus:
        container_name: prometheus
        command: [ "--enable-feature=otlp-write-receiver", "--config.file=/etc/prometheus/prometheus.yml", "--web.enable-remote-write-receiver", "--enable-feature=exemplar-storage", "--enable-feature=native-histograms" ]
        volumes:
            - '../config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml'
        image: prom/prometheus:v2.54.1
        ports:
            - '9090:9090'
    grafana:
        container_name: grafana
        volumes:
            - '../config/grafana/provisioning/:/etc/grafana/provisioning/'
        image: grafana/grafana:11.2.2
        ports:
            - '3000:3000'
    tempo:
        container_name: tempo
        command: [ "-config.file=/etc/tempo.yaml" ]
        volumes:
            - '../config/tempo/tempo.yaml:/etc/tempo.yaml'
        image: grafana/tempo:2.6.0
        ports:
            - '4418:4418'
            - '3200:3200'
    ###depends on infra###
#   jaeger:
#       container_name: jaeger
#       image: jaegertracing/all-in-one
#       volumes:
#           - '../config/jaeger/sampling_strategies.json:/etc/jaeger/sampling_strategies.json'
#       ports:
#           - '6831:6831/udp'
#           - '16686:16686'
    opentelemetry-collector:
        container_name: opentelemetry-collector
        image: otel/opentelemetry-collector:0.111.0
        # contrib collector repo e.g. tail_sampling processor
        # https://github.com/open-telemetry/opentelemetry-collector-contrib
        # image: otel/opentelemetry-collector-contrib:0.92.0
        command: [--config=/etc/otel-collector-config.yaml]
        volumes:
            - ../config/opentelemetry/otel-collector-config.yaml:/etc/otel-collector-config.yaml
            # - ../config/opentelemetry/otel-collector-probabilistic-sampling-config.yaml:/etc/otel-collector-config.yaml
            # - ../config/opentelemetry/otel-collector-tail-sampling-config.yaml:/etc/otel-collector-config.yaml
            # example sampling strategies to otelcol 
            #- ../config/jaeger/sampling_strategies.json:/etc/otelcol/sampling_strategies.json
        ports:
            - 1888:1888 # pprof extension
            - 8888:8888 # Prometheus metrics exposed by the collector
            - 8889:8889 # Prometheus exporter metrics
            - 13133:13133 # health_check extension
            - 4317:4317 # OTLP gRPC receiver
            - 4318:4318 # OTLP http receiver
            - 55679:55679 # zpages extension
            - 1234:1234 # /metrics endpoint
    ###not supported yet###
    loki:
        container_name: loki
        command: [ "-config.file=/etc/loki/local-config.yaml" ]
        volumes:
          - ../config/loki/loki.yaml:/etc/loki/local-config.yaml'
        image: grafana/loki:3.2.0
        ports:
            - '3100:3100'
     ###dashboards missing instance and job name###
#    otel-lgtm:
#        container_name: otel-lgtm
#        image: grafana/otel-lgtm
#        ports:
#            - '3000:3000'
#            - '4317:4317'
#            - '4318:4318'
networks:
    default:
        external:
            # if it could not be found on compose up, then execute: docker network create quarkus-sampler-local-network
            name: quarkus-sampler-local-network
