version: "3.8"

# run
# docker-compose -f <PROJECT_PATH>/quarkus-sampler/etc/docker-compose/docker-compose.local.qs-rest-service.yml up --build --force-recreate
#
# run from project directory
# docker-compose -f ./etc/docker-compose/docker-compose.local.qs-rest-service.yml up --build --force-recreate
#
# enter container
# docker exec -it qs-rest-service-dev /bin/bash
#
# empty run
# docker run --rm -it qs-rest-service:develop-local /bin/bash
services:
    qs-rest-service:
        container_name: qs-rest-service-dev
        build:
            context: ../../
            dockerfile: etc/docker-compose/local.fast-jar.Dockerfile
            args:
                ICELL_JAVA_JRE_BASE_IMAGE: 'icellmobilsoft/base-java21jre:1.4.0'
                SERVICE: 'qs-rest-service'
        image: "qs-rest-service:develop-local"
        environment:
            # With this config, service use application-dev.yml!
#            - MP_CONFIG_PROFILE=dev
            #etcd
            - COFFEE_ETCD_DEFAULT_URL=http://qs-etcd:2379
            #gelf
            - SAMPLER_GELF_ENABLED=false
            - SAMPLER_GELF_HOST=graylog
            - SAMPLER_GELF_PORT=12201
            - SAMPLER_GELF_MODULE_VERSION=0.1.0-SNAPSHOT
            - SAMPLER_GELF_MODULE_ID=qs-rest-service-dev
            - SAMPLER_GELF_K8S_NAMESPACE=qs-k8s
            #opts
#            - JAVA_OPTS=-Xms128m -Xmx128m -XX:MetaspaceSize=64M -XX:MaxMetaspaceSize=64m -XX:+PrintCommandLineFlags -XX:+UseG1GC -Xlog:gc -XshowSettings:vm -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005 -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Dquarkus.http.host=0.0.0.0
            - JAVA_OPTS=-Xms128m -Xmx128m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=96m -XX:+PrintCommandLineFlags -XX:+UseParallelGC -Xlog:gc -XshowSettings:vm -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005 -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Dquarkus.http.host=0.0.0.0
#            - JAVA_OPTS=-Xms128m -Xmx384m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=128m -XX:+PrintCommandLineFlags -XX:+UseParallelGC -Xlog:gc -XshowSettings:vm -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005 -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Dquarkus.http.host=0.0.0.0
#            - JAVA_OPTS=-Xms128m -Xmx128m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=128m -XX:+PrintCommandLineFlags -XX:+UseParallelGC -Xlog:gc -XshowSettings:vm -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005 -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Dquarkus.http.host=0.0.0.0
#            - JAVA_OPTS=-Xms1000m -Xmx1000m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -XX:+PrintCommandLineFlags -XX:NativeMemoryTracking=detail -XX:+UseG1GC -Xlog:gc -XshowSettings:vm -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005 -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Dquarkus.http.host=0.0.0.0
            - OTEL_METRIC_EXPORT_INTERVAL=300
        ports:
            - '8080:8080' # REST
            - '5005:5005' # Debug
            - '9001:9001' # Management
        deploy:
            resources:
                limits:
                    cpus: '1'
                    memory: 600MB
                reservations:
                    cpus: '1'
                    memory: 600MB
networks:
    default:
        external:
            # if it could not be found on compose up, then execute: docker network create quarkus-sampler-local-network
            name: quarkus-sampler-local-network
